import unittest
import sys
from friendly_bytes_function import friendly_bytes


class MyTestCase(unittest.TestCase):
    """
       UnitTest for friendly_bytes_function
       """
    global arr

    def setUp(self):
        (12, 12, "B")
        (342, 342, "B")
        (121, 121, "B")
        (341, 341, "B")
        (124, 124, "B")
        (345, 345, "B")
        (3487384349, 112496269.32, "ZB")
        (4874373873, )
        (2387237430, )
        (3487384349, )
        (4874373873, )
        (2387237430, )

    def test_on_positive(self):
        self.assertEqual(friendly_bytes( 212321 ),' 212.32 KB ')
        self.assertEqual(friendly_bytes( 45450 ),' 45.45 KB ')
        self.assertEqual(friendly_bytes( 903428347234 ),' 903.43 GB ')
        self.assertEqual(friendly_bytes( 238942.443 ),' 238.94 KB ')
        self.assertEqual(friendly_bytes( 8343493409.22212 ),' 8.34 GB ')
        self.assertEqual(friendly_bytes( 840933049 ),' 840.93 MB ')
        self.assertEqual(friendly_bytes( 0 ),' 0 B ')
        self.assertEqual(friendly_bytes( 0.0 ),' 0 B ')
        self.assertEqual(friendly_bytes( 483434093 ),' 483.43 MB ')
        self.assertEqual(friendly_bytes( 24 ),' 24.0 B ')
        self.assertEqual(friendly_bytes( 24.0 ),' 24.0 B ')
        self.assertEqual(friendly_bytes( 0.3 ),' 300.0 YB ')
        self.assertEqual(friendly_bytes( 90.59438934 ),' 90.59 B ')
        self.assertEqual(friendly_bytes( 122133 ),' 122.13 KB ')
        self.assertEqual(friendly_bytes( 328939324239329234 ),' 328.94 PB ')
        self.assertEqual(friendly_bytes( 3434904393490 ),' 3.43 TB ')
        self.assertEqual(friendly_bytes( 349823093209 ),' 349.82 GB ')
        self.assertEqual(friendly_bytes( 332423.3232432 ),' 332.42 KB ')
        self.assertEqual(friendly_bytes( 48234023409 ),' 48.23 GB ')
        self.assertEqual(friendly_bytes( 32.3 ),' 32.3 B ')
        self.assertEqual(friendly_bytes( 239023932 ),' 239.02 MB ')
        self.assertEqual(friendly_bytes( 0 ),' 0 B ')
        self.assertEqual(friendly_bytes( 11 ),' 11.0 B ')


    def test_on_negative(self):
        self.assertEqual(friendly_bytes(- 212321 ),' -212.32 KB ')
        self.assertEqual(friendly_bytes(- 45450 ),' -45.45 KB ')
        self.assertEqual(friendly_bytes(- 903428347234 ),' -903.43 GB ')
        self.assertEqual(friendly_bytes(- 238942.443 ),' -238.94 KB ')
        self.assertEqual(friendly_bytes(- 8343493409.22212 ),' -8.34 GB ')
        self.assertEqual(friendly_bytes(- 840933049 ),' -840.93 MB ')
        self.assertEqual(friendly_bytes(- 0 ),' 0 B ')
        self.assertEqual(friendly_bytes(- 0.0 ),' 0 B ')
        self.assertEqual(friendly_bytes(- 483434093 ),' -483.43 MB ')
        self.assertEqual(friendly_bytes(- 24 ),' -24.0 B ')
        self.assertEqual(friendly_bytes(- 24.0 ),' -24.0 B ')
        self.assertEqual(friendly_bytes(- 0.3 ),' -300.0 YB ')
        self.assertEqual(friendly_bytes(- 90.59438934 ),' -90.59 B ')
        self.assertEqual(friendly_bytes(- 122133 ),' -122.13 KB ')
        self.assertEqual(friendly_bytes(- 328939324239329234 ),' -328.94 PB ')
        self.assertEqual(friendly_bytes(- 3434904393490 ),' -3.43 TB ')
        self.assertEqual(friendly_bytes(- 349823093209 ),' -349.82 GB ')
        self.assertEqual(friendly_bytes(- 332423.3232432 ),' -332.42 KB ')
        self.assertEqual(friendly_bytes(- 48234023409 ),' -48.23 GB ')
        self.assertEqual(friendly_bytes(- 32.3 ),' -32.3 B ')
        self.assertEqual(friendly_bytes(- 239023932 ),' -239.02 MB ')
        self.assertEqual(friendly_bytes(- 0 ),' 0 B ')
        self.assertEqual(friendly_bytes(- 11 ),' -11.0 B ')

    def test_on_decimals(self):
        self.assertEqual(friendly_bytes( 43443.2334243 ,decimals= 0 ),' 43.0 KB ')
        self.assertEqual(friendly_bytes( 43443.2334243 ,decimals= 1 ),' 43.4 KB ')
        self.assertEqual(friendly_bytes( 43443.2334243 ,decimals= 2 ),' 43.44 KB ')
        self.assertEqual(friendly_bytes( 43443.2334243 ,decimals= 3 ),' 43.443 KB ')
        self.assertEqual(friendly_bytes( 43443.2334243 ,decimals= 4 ),' 43.4432 KB ')
        self.assertEqual(friendly_bytes( 43443.2334243 ,decimals= 5 ),' 43.44323 KB ')
        self.assertEqual(friendly_bytes( 43443.2334243 ,decimals= 6 ),' 43.443233 KB ')
        self.assertEqual(friendly_bytes( 43443.2334243 ,decimals= 7 ),' 43.4432334 KB ')
        self.assertEqual(friendly_bytes( 43443.2334243 ,decimals= 8 ),' 43.44323342 KB ')
        self.assertEqual(friendly_bytes( 43443.2334243 ,decimals= 9 ),' 43.443233424 KB ')
        self.assertEqual(friendly_bytes( 43456.879889 ,decimals= 0 ),' 43.0 KB ')
        self.assertEqual(friendly_bytes( 43456.879889 ,decimals= 1 ),' 43.5 KB ')
        self.assertEqual(friendly_bytes( 43456.879889 ,decimals= 2 ),' 43.46 KB ')
        self.assertEqual(friendly_bytes( 43456.879889 ,decimals= 3 ),' 43.457 KB ')
        self.assertEqual(friendly_bytes( 43456.879889 ,decimals= 4 ),' 43.4569 KB ')
        self.assertEqual(friendly_bytes( 43456.879889 ,decimals= 5 ),' 43.45688 KB ')
        self.assertEqual(friendly_bytes( 43456.879889 ,decimals= 6 ),' 43.45688 KB ')
        self.assertEqual(friendly_bytes( 43456.879889 ,decimals= 7 ),' 43.4568799 KB ')
        self.assertEqual(friendly_bytes( 43456.879889 ,decimals= 8 ),' 43.45687989 KB ')
        self.assertEqual(friendly_bytes( 43456.879889 ,decimals= 9 ),' 43.456879889 KB ')
        self.assertEqual(friendly_bytes( 12223.889 ,decimals= 0 ),' 12.0 KB ')
        self.assertEqual(friendly_bytes( 12223.889 ,decimals= 1 ),' 12.2 KB ')
        self.assertEqual(friendly_bytes( 12223.889 ,decimals= 2 ),' 12.22 KB ')
        self.assertEqual(friendly_bytes( 12223.889 ,decimals= 3 ),' 12.224 KB ')
        self.assertEqual(friendly_bytes( 12223.889 ,decimals= 4 ),' 12.2239 KB ')
        self.assertEqual(friendly_bytes( 12223.889 ,decimals= 5 ),' 12.22389 KB ')
        self.assertEqual(friendly_bytes( 12223.889 ,decimals= 6 ),' 12.223889 KB ')
        self.assertEqual(friendly_bytes( 12223.889 ,decimals= 7 ),' 12.223889 KB ')
        self.assertEqual(friendly_bytes( 12223.889 ,decimals= 8 ),' 12.223889 KB ')
        self.assertEqual(friendly_bytes( 12223.889 ,decimals= 9 ),' 12.223889 KB ')
        self.assertEqual(friendly_bytes( 32324.009 ,decimals= 0 ),' 32.0 KB ')
        self.assertEqual(friendly_bytes( 32324.009 ,decimals= 1 ),' 32.3 KB ')
        self.assertEqual(friendly_bytes( 32324.009 ,decimals= 2 ),' 32.32 KB ')
        self.assertEqual(friendly_bytes( 32324.009 ,decimals= 3 ),' 32.324 KB ')
        self.assertEqual(friendly_bytes( 32324.009 ,decimals= 4 ),' 32.324 KB ')
        self.assertEqual(friendly_bytes( 32324.009 ,decimals= 5 ),' 32.32401 KB ')
        self.assertEqual(friendly_bytes( 32324.009 ,decimals= 6 ),' 32.324009 KB ')
        self.assertEqual(friendly_bytes( 32324.009 ,decimals= 7 ),' 32.324009 KB ')
        self.assertEqual(friendly_bytes( 32324.009 ,decimals= 8 ),' 32.324009 KB ')
        self.assertEqual(friendly_bytes( 32324.009 ,decimals= 9 ),' 32.324009 KB ')
        self.assertEqual(friendly_bytes( 873489732.079067 ,decimals= 0 ),' 873.0 MB ')
        self.assertEqual(friendly_bytes( 873489732.079067 ,decimals= 1 ),' 873.5 MB ')
        self.assertEqual(friendly_bytes( 873489732.079067 ,decimals= 2 ),' 873.49 MB ')
        self.assertEqual(friendly_bytes( 873489732.079067 ,decimals= 3 ),' 873.49 MB ')
        self.assertEqual(friendly_bytes( 873489732.079067 ,decimals= 4 ),' 873.4897 MB ')
        self.assertEqual(friendly_bytes( 873489732.079067 ,decimals= 5 ),' 873.48973 MB ')
        self.assertEqual(friendly_bytes( 873489732.079067 ,decimals= 6 ),' 873.489732 MB ')
        self.assertEqual(friendly_bytes( 873489732.079067 ,decimals= 7 ),' 873.4897321 MB ')
        self.assertEqual(friendly_bytes( 873489732.079067 ,decimals= 8 ),' 873.48973208 MB ')
        self.assertEqual(friendly_bytes( 873489732.079067 ,decimals= 9 ),' 873.489732079 MB ')
        self.assertEqual(friendly_bytes( 1283.003643 ,decimals= 0 ),' 1.0 KB ')
        self.assertEqual(friendly_bytes( 1283.003643 ,decimals= 1 ),' 1.3 KB ')
        self.assertEqual(friendly_bytes( 1283.003643 ,decimals= 2 ),' 1.28 KB ')
        self.assertEqual(friendly_bytes( 1283.003643 ,decimals= 3 ),' 1.283 KB ')
        self.assertEqual(friendly_bytes( 1283.003643 ,decimals= 4 ),' 1.283 KB ')
        self.assertEqual(friendly_bytes( 1283.003643 ,decimals= 5 ),' 1.283 KB ')
        self.assertEqual(friendly_bytes( 1283.003643 ,decimals= 6 ),' 1.283004 KB ')
        self.assertEqual(friendly_bytes( 1283.003643 ,decimals= 7 ),' 1.2830036 KB ')
        self.assertEqual(friendly_bytes( 1283.003643 ,decimals= 8 ),' 1.28300364 KB ')
        self.assertEqual(friendly_bytes( 1283.003643 ,decimals= 9 ),' 1.283003643 KB ')
        self.assertEqual(friendly_bytes( 38732.3402424 ,decimals= 0 ),' 39.0 KB ')
        self.assertEqual(friendly_bytes( 38732.3402424 ,decimals= 1 ),' 38.7 KB ')
        self.assertEqual(friendly_bytes( 38732.3402424 ,decimals= 2 ),' 38.73 KB ')
        self.assertEqual(friendly_bytes( 38732.3402424 ,decimals= 3 ),' 38.732 KB ')
        self.assertEqual(friendly_bytes( 38732.3402424 ,decimals= 4 ),' 38.7323 KB ')
        self.assertEqual(friendly_bytes( 38732.3402424 ,decimals= 5 ),' 38.73234 KB ')
        self.assertEqual(friendly_bytes( 38732.3402424 ,decimals= 6 ),' 38.73234 KB ')
        self.assertEqual(friendly_bytes( 38732.3402424 ,decimals= 7 ),' 38.7323402 KB ')
        self.assertEqual(friendly_bytes( 38732.3402424 ,decimals= 8 ),' 38.73234024 KB ')
        self.assertEqual(friendly_bytes( 38732.3402424 ,decimals= 9 ),' 38.732340242 KB ')
        self.assertEqual(friendly_bytes( 11.22 ,decimals= 0 ),' 11.0 B ')
        self.assertEqual(friendly_bytes( 11.22 ,decimals= 1 ),' 11.2 B ')
        self.assertEqual(friendly_bytes( 11.22 ,decimals= 2 ),' 11.22 B ')
        self.assertEqual(friendly_bytes( 11.22 ,decimals= 3 ),' 11.22 B ')
        self.assertEqual(friendly_bytes( 11.22 ,decimals= 4 ),' 11.22 B ')
        self.assertEqual(friendly_bytes( 11.22 ,decimals= 5 ),' 11.22 B ')
        self.assertEqual(friendly_bytes( 11.22 ,decimals= 6 ),' 11.22 B ')
        self.assertEqual(friendly_bytes( 11.22 ,decimals= 7 ),' 11.22 B ')
        self.assertEqual(friendly_bytes( 11.22 ,decimals= 8 ),' 11.22 B ')
        self.assertEqual(friendly_bytes( 11.22 ,decimals= 9 ),' 11.22 B ')
        self.assertEqual(friendly_bytes( 32873298329.32 ,decimals= 0 ),' 33.0 GB ')
        self.assertEqual(friendly_bytes( 32873298329.32 ,decimals= 1 ),' 32.9 GB ')
        self.assertEqual(friendly_bytes( 32873298329.32 ,decimals= 2 ),' 32.87 GB ')
        self.assertEqual(friendly_bytes( 32873298329.32 ,decimals= 3 ),' 32.873 GB ')
        self.assertEqual(friendly_bytes( 32873298329.32 ,decimals= 4 ),' 32.8733 GB ')
        self.assertEqual(friendly_bytes( 32873298329.32 ,decimals= 5 ),' 32.8733 GB ')
        self.assertEqual(friendly_bytes( 32873298329.32 ,decimals= 6 ),' 32.873298 GB ')
        self.assertEqual(friendly_bytes( 32873298329.32 ,decimals= 7 ),' 32.8732983 GB ')
        self.assertEqual(friendly_bytes( 32873298329.32 ,decimals= 8 ),' 32.87329833 GB ')
        self.assertEqual(friendly_bytes( 32873298329.32 ,decimals= 9 ),' 32.873298329 GB ')
        self.assertEqual(friendly_bytes( 3832.1 ,decimals= 0 ),' 4.0 KB ')
        self.assertEqual(friendly_bytes( 3832.1 ,decimals= 1 ),' 3.8 KB ')
        self.assertEqual(friendly_bytes( 3832.1 ,decimals= 2 ),' 3.83 KB ')
        self.assertEqual(friendly_bytes( 3832.1 ,decimals= 3 ),' 3.832 KB ')
        self.assertEqual(friendly_bytes( 3832.1 ,decimals= 4 ),' 3.8321 KB ')
        self.assertEqual(friendly_bytes( 3832.1 ,decimals= 5 ),' 3.8321 KB ')
        self.assertEqual(friendly_bytes( 3832.1 ,decimals= 6 ),' 3.8321 KB ')
        self.assertEqual(friendly_bytes( 3832.1 ,decimals= 7 ),' 3.8321 KB ')
        self.assertEqual(friendly_bytes( 3832.1 ,decimals= 8 ),' 3.8321 KB ')
        self.assertEqual(friendly_bytes( 3832.1 ,decimals= 9 ),' 3.8321 KB ')


    def test_binary_parameter(self):
        self.assertEqual(friendly_bytes( 212321 , binary=True),' 207.34 KiB ')
        self.assertEqual(friendly_bytes( 45450 , binary=True),' 44.38 KiB ')
        self.assertEqual(friendly_bytes( 903428347234 , binary=True),' 841.38 GiB ')
        self.assertEqual(friendly_bytes( 238942.443 , binary=True),' 233.34 KiB ')
        self.assertEqual(friendly_bytes( 8343493409.22212 , binary=True),' 7.77 GiB ')
        self.assertEqual(friendly_bytes( 840933049 , binary=True),' 801.98 MiB ')
        self.assertEqual(friendly_bytes( 0 , binary=True),' 0 B ')
        self.assertEqual(friendly_bytes( 0.0 , binary=True),' 0 B ')
        self.assertEqual(friendly_bytes( 483434093 , binary=True),' 461.04 MiB ')
        self.assertEqual(friendly_bytes( 24 , binary=True),' 24.0 B ')
        self.assertEqual(friendly_bytes( 24.0 , binary=True),' 24.0 B ')
        self.assertEqual(friendly_bytes( 0.3 , binary=True),' 307.2 YiB ')
        self.assertEqual(friendly_bytes( 90.59438934 , binary=True),' 90.59 B ')
        self.assertEqual(friendly_bytes( 122133 , binary=True),' 119.27 KiB ')
        self.assertEqual(friendly_bytes( 328939324239329234 , binary=True),' 292.16 PiB ')
        self.assertEqual(friendly_bytes( 3434904393490 , binary=True),' 3.12 TiB ')
        self.assertEqual(friendly_bytes( 349823093209 , binary=True),' 325.8 GiB ')
        self.assertEqual(friendly_bytes( 332423.3232432 , binary=True),' 324.63 KiB ')
        self.assertEqual(friendly_bytes( 48234023409 , binary=True),' 44.92 GiB ')
        self.assertEqual(friendly_bytes( 32.3 , binary=True),' 32.3 B ')
        self.assertEqual(friendly_bytes( 239023932 , binary=True),' 227.95 MiB ')
        self.assertEqual(friendly_bytes( 0 , binary=True),' 0 B ')
        self.assertEqual(friendly_bytes( 11 , binary=True),' 11.0 B ')

    def test_false_binary(self):
        self.assertEqual(friendly_bytes( 212321 , binary=False),' 212.32 KB ')
        self.assertEqual(friendly_bytes( 45450 , binary=False),' 45.45 KB ')
        self.assertEqual(friendly_bytes( 903428347234 , binary=False),' 903.43 GB ')
        self.assertEqual(friendly_bytes( 238942.443 , binary=False),' 238.94 KB ')
        self.assertEqual(friendly_bytes( 8343493409.22212 , binary=False),' 8.34 GB ')
        self.assertEqual(friendly_bytes( 840933049 , binary=False),' 840.93 MB ')
        self.assertEqual(friendly_bytes( 0 , binary=False),' 0 B ')
        self.assertEqual(friendly_bytes( 0.0 , binary=False),' 0 B ')
        self.assertEqual(friendly_bytes( 483434093 , binary=False),' 483.43 MB ')
        self.assertEqual(friendly_bytes( 24 , binary=False),' 24.0 B ')
        self.assertEqual(friendly_bytes( 24.0 , binary=False),' 24.0 B ')
        self.assertEqual(friendly_bytes( 0.3 , binary=False),' 300.0 YB ')
        self.assertEqual(friendly_bytes( 90.59438934 , binary=False),' 90.59 B ')
        self.assertEqual(friendly_bytes( 122133 , binary=False),' 122.13 KB ')
        self.assertEqual(friendly_bytes( 328939324239329234 , binary=False),' 328.94 PB ')
        self.assertEqual(friendly_bytes( 3434904393490 , binary=False),' 3.43 TB ')
        self.assertEqual(friendly_bytes( 349823093209 , binary=False),' 349.82 GB ')
        self.assertEqual(friendly_bytes( 332423.3232432 , binary=False),' 332.42 KB')
        self.assertEqual(friendly_bytes( 48234023409 , binary=False),' 48.23 GB ')
        self.assertEqual(friendly_bytes( 32.3 , binary=False),' 32.3 B ')
        self.assertEqual(friendly_bytes( 239023932 , binary=False),' 239.02 MB ')
        self.assertEqual(friendly_bytes( 0 , binary=False),' 0 B ')
        self.assertEqual(friendly_bytes( 11 , binary=False),' 11.0 B ')


if __name__ == '__main__':
    unittest.main()